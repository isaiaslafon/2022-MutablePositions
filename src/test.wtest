
import wollok.game.*
import direcciones.*
import configuration.*
import templates.*

import MutablePosition.*

describe "Funcionamiento de movimientos" {
	
	test "La nave se mueve hacia arriba" {
		avion.moverHacia(arriba)
		assert.equals(new MutablePosition(x = 2,y = 1),avion.position())
	}
	
	test "La nave se mueve hacia abajo" {
		avion.moverHacia(abajo)
		assert.equals(new MutablePosition(x = 2,y = -1),avion.position())
	}
	
	test "La nave se mueve hacia la izquierda" {
		avion.moverHacia(izquierda)
		assert.equals(new MutablePosition(x= 1,y = 0),avion.position())
	}
	
	test "La nave se mueve hacia la derecha" {
		avion.moverHacia(derecha)
		assert.equals(new MutablePosition(x=3,y=0),avion.position())
	}
					
}

describe "Funcionamiento del disparo" {

	
	
	test "Luego de disparar una vez aun le quedan balas"{
		avion.arma().cartuchoSeleccionado().consumirBala()
		assert.that(avion.arma().cartuchoSeleccionado().tieneBalas())
	}
	
	test "Luego de disparar 30 veces el cartucho se queda sin balas"{
		30.times({_ => avion.arma().cartuchoSeleccionado().consumirBala()})
		assert.notThat(avion.arma().cartuchoSeleccionado().tieneBalas())
	} 
	

	test "Inicialmente el arma tiene el cartuchoDefault"{
		assert.equals(cartuchoDefault,rifle.cartuchos().get(rifle.selectorCartucho()))
	}
	
	test "Cambiar a cartucho grande  "{
		avion.cambiarMunicion()
		assert.equals(cartuchoGrande,rifle.cartuchos().get(rifle.selectorCartucho()))
	
	}
}

describe "Verificar vida de la nave"{
	
	// La armadura default posee 3 de vida
	test "Inicialmente la nave tiene una vida igual a 3"{
		assert.equals(3,avion.armadura().vida())
	}
	
	test "la nave recibe daño y su vida queda en 2"{
		avion.reducirVida(1)
		assert.equals(2,avion.armadura().vida())
	}
}


describe "Asteroides"{
	
	const template = new TemplateAsteroide(danio =1, imagen = "asteroideChiquitin.png", velocidad = -0.6, puntaje = 100,vida = 1)
	const asteroidePrueba = template.crearTemplate()
	
	test "El asteroide no esta destruido(tiene vida)"{
		assert.notThat(asteroidePrueba.sinVida())
	}
	
	//Inicialmente tiene 1 de vida
	test "El asteroide recibe 2 de daño"{
		asteroidePrueba.reducirVida(2)
		assert.equals(-1,asteroidePrueba.vida())
	}
	
	test "Al recibir 3 de daño, es destruido(sin vida)"{
		asteroidePrueba.reducirVida(3)
		assert.that(asteroidePrueba.sinVida())
	}
	
	test "Al morir,se suma 100 puntos al pointTracker"{
		asteroidePrueba.morir()
		assert.equals(100,pointTracker.puntajeAcumulado())
	}
	

	test "Al chocar con el avion, el avion pierde vida"{
		avion.reducirVida(asteroidePrueba.danio())
		assert.equals(2,avion.armadura().vida())
		
	}
	


}


describe "Provisiones"{
	
	const templateVida = new TemplateVida(vida=1)
	const provisionVida = templateVida.crearTemplate()
	
	const templateMunicion = new TemplateMunicion(cartucho = cartuchoDefault,cantidad = 10) 
	const provisionMunicion = templateMunicion.crearTemplate()
	
	const templateArmadura = new TemplateArmadura(armor = carcazaInfinita)
	const provisionArmadura = templateArmadura.crearTemplate()
	
	
	test "provisionVida cura 1 de vida"{
		assert.equals(1,provisionVida.vidaQueCura())
	}
	
	test"Inicialemente el avion tiene 3 de vida"{
		assert.equals(3,avion.vida())	
	}
	
	test "provisionVida al impactar con el avion le aumenta 1 de vida"{
		avion.agregarVida(provisionVida.vidaQueCura())
		assert.equals(4,avion.vida())
	}
	
	test "La municion contiene 10 balas del cartuchoDefault"{
		assert.equals(10,provisionMunicion.cantidadDeBalas())
		assert.equals(cartuchoDefault,provisionMunicion.cartucho())
	}
	
	test "Avion inicialmente tiene 30 balas del cartucho default"{
		assert.equals(cartuchoDefault,avion.arma().cartuchoSeleccionado())
		assert.equals(30,avion.arma().cartuchoSeleccionado().cantidadDeBalas())
	}
	
	test "provisionMunicion al impactar con el avion, la aumenta 10 balas"{
		avion.cargarCartucho(provisionMunicion.cartucho(),provisionMunicion.cantidadDeBalas())
		assert.equals(40,avion.arma().cartuchoSeleccionado().cantidadDeBalas())
	}
	
	test "Avion inicialmente lleva puesta la carcaza normal"{
		assert.equals(carcazaNormal,avion.armadura())
	}
	
	test "provisionArmadura al impactar con el avion, le cambia su armadura a carcazaInfinita"{
		avion.cambiarArmadura(provisionArmadura.armadura())
		assert.equals(carcazaInfinita,avion.armadura())
	}
}


